{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xifi3\\\\Desktop\\\\FinanceProject\\\\frontend\\\\src\\\\Components\\\\BalanceSheet\\\\BalanceSheet.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport RatioList from \"../RatioList/RatioList\";\nimport { getBalanceSheet } from \"../../api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = [{\n  label: \"Cash\",\n  render: company => company.cashAndCashEquivalents\n}, {\n  label: \"Inventory\",\n  render: company => company.inventory\n}, {\n  label: \"Other Current Assets\",\n  render: company => company.otherCurrentAssets\n}, {\n  label: \"Minority Interest\",\n  render: company => company.minorityInterest\n}, {\n  label: \"Other Non-Current Assets\",\n  render: company => company.otherNonCurrentAssets\n}, {\n  label: \"Long Term Debt\",\n  render: company => company.longTermDebt\n}, {\n  label: \"Total Debt\",\n  render: company => company.otherCurrentLiabilities\n}];\nconst BalanceSheet = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [companyData, setCompanyData] = useState();\n  useEffect(() => {\n    const getCompanyData = async () => {\n      const value = await getBalanceSheet(ticker);\n      setCompanyData(value === null || value === void 0 ? void 0 : value.data[0]);\n    };\n    getCompanyData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: companyData ? /*#__PURE__*/_jsxDEV(RatioList, {\n      config: config,\n      data: companyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Company data not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(BalanceSheet, \"oIWvfb9RHbVWP9I9E1ZAfgq5EdY=\", false, function () {\n  return [useOutletContext];\n});\n_c = BalanceSheet;\nexport default BalanceSheet;\nvar _c;\n$RefreshReg$(_c, \"BalanceSheet\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","RatioList","getBalanceSheet","jsxDEV","_jsxDEV","Fragment","_Fragment","config","label","render","company","cashAndCashEquivalents","inventory","otherCurrentAssets","minorityInterest","otherNonCurrentAssets","longTermDebt","otherCurrentLiabilities","BalanceSheet","props","_s","ticker","companyData","setCompanyData","getCompanyData","value","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/xifi3/Desktop/FinanceProject/frontend/src/Components/BalanceSheet/BalanceSheet.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { CompanyBalanceSheet } from \"../../company\";\r\nimport { useOutletContext } from \"react-router-dom\";\r\nimport RatioList from \"../RatioList/RatioList\";\r\nimport { getBalanceSheet } from \"../../api\";\r\nimport Table from \"../Table/Table\";\r\n\r\ntype Props = {};\r\n\r\nconst config = [\r\n  {\r\n    label: \"Cash\",\r\n    render: (company: CompanyBalanceSheet) => company.cashAndCashEquivalents,\r\n  },\r\n  {\r\n    label: \"Inventory\",\r\n    render: (company: CompanyBalanceSheet) => company.inventory,\r\n  },\r\n  {\r\n    label: \"Other Current Assets\",\r\n    render: (company: CompanyBalanceSheet) => company.otherCurrentAssets,\r\n  },\r\n  {\r\n    label: \"Minority Interest\",\r\n    render: (company: CompanyBalanceSheet) => company.minorityInterest,\r\n  },\r\n  {\r\n    label: \"Other Non-Current Assets\",\r\n    render: (company: CompanyBalanceSheet) => company.otherNonCurrentAssets,\r\n  },\r\n  {\r\n    label: \"Long Term Debt\",\r\n    render: (company: CompanyBalanceSheet) => company.longTermDebt,\r\n  },\r\n  {\r\n    label: \"Total Debt\",\r\n    render: (company: CompanyBalanceSheet) => company.otherCurrentLiabilities,\r\n  },\r\n];\r\n\r\nconst BalanceSheet = (props: Props) => {\r\n  const ticker = useOutletContext<string>();\r\n  const [companyData, setCompanyData] = useState<CompanyBalanceSheet>();\r\n  useEffect(() => {\r\n    const getCompanyData = async () => {\r\n      const value = await getBalanceSheet(ticker!);\r\n      setCompanyData(value?.data[0]);\r\n    };\r\n    getCompanyData();\r\n  }, []);\r\n  return (\r\n    <>\r\n      {companyData ? (\r\n        <RatioList config={config} data={companyData} />\r\n      ) : (\r\n        <h1>Company data not found</h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BalanceSheet;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,eAAe,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAK5C,MAAMC,MAAM,GAAG,CACb;EACEC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACC;AACpD,CAAC,EACD;EACEH,KAAK,EAAE,WAAW;EAClBC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACE;AACpD,CAAC,EACD;EACEJ,KAAK,EAAE,sBAAsB;EAC7BC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACG;AACpD,CAAC,EACD;EACEL,KAAK,EAAE,mBAAmB;EAC1BC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACI;AACpD,CAAC,EACD;EACEN,KAAK,EAAE,0BAA0B;EACjCC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACK;AACpD,CAAC,EACD;EACEP,KAAK,EAAE,gBAAgB;EACvBC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACM;AACpD,CAAC,EACD;EACER,KAAK,EAAE,YAAY;EACnBC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACO;AACpD,CAAC,CACF;AAED,MAAMC,YAAY,GAAIC,KAAY,IAAK;EAAAC,EAAA;EACrC,MAAMC,MAAM,GAAGrB,gBAAgB,CAAS,CAAC;EACzC,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAsB,CAAC;EACrED,SAAS,CAAC,MAAM;IACd,MAAM0B,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,KAAK,GAAG,MAAMvB,eAAe,CAACmB,MAAO,CAAC;MAC5CE,cAAc,CAACE,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IACDF,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EACN,oBACEpB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,EACGL,WAAW,gBACVlB,OAAA,CAACH,SAAS;MAACM,MAAM,EAAEA,MAAO;MAACmB,IAAI,EAAEJ;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEhD3B,OAAA;MAAAuB,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAC/B,gBACD,CAAC;AAEP,CAAC;AAACX,EAAA,CAnBIF,YAAY;EAAA,QACDlB,gBAAgB;AAAA;AAAAgC,EAAA,GAD3Bd,YAAY;AAqBlB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}