{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xifi3\\\\Desktop\\\\FinanceProject\\\\frontend\\\\src\\\\Components\\\\BalanceSheet\\\\BalanceSheet.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useOutletContext } from \"react-router\";\nimport { getBalanceSheet } from \"../../api\";\nimport RatioList from \"../RatioList/RatioList\";\nimport Spinner from \"../Spinner/Spinner\";\nimport { formatLargeMonetaryNumber } from \"../../Helpers/NumberFormatting\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = [{\n  label: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"font-bold\",\n    children: \"Total Assets\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this),\n  render: company => formatLargeMonetaryNumber(company.totalAssets)\n}, {\n  label: \"Current Assets\",\n  render: company => formatLargeMonetaryNumber(company.totalCurrentAssets)\n}, {\n  label: \"Total Cash\",\n  render: company => formatLargeMonetaryNumber(company.cashAndCashEquivalents)\n}, {\n  label: \"Property & equipment\",\n  render: company => formatLargeMonetaryNumber(company.propertyPlantEquipmentNet)\n}, {\n  label: \"Intangible Assets\",\n  render: company => formatLargeMonetaryNumber(company.intangibleAssets)\n}, {\n  label: \"Long Term Debt\",\n  render: company => formatLargeMonetaryNumber(company.longTermDebt)\n}, {\n  label: \"Total Debt\",\n  render: company => formatLargeMonetaryNumber(company.otherCurrentLiabilities)\n}, {\n  label: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"font-bold\",\n    children: \"Total Liabilites\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 12\n  }, this),\n  render: company => formatLargeMonetaryNumber(company.totalLiabilities)\n}, {\n  label: \"Current Liabilities\",\n  render: company => formatLargeMonetaryNumber(company.totalCurrentLiabilities)\n}, {\n  label: \"Long-Term Debt\",\n  render: company => formatLargeMonetaryNumber(company.longTermDebt)\n}, {\n  label: \"Long-Term Income Taxes\",\n  render: company => formatLargeMonetaryNumber(company.otherLiabilities)\n}, {\n  label: \"Stakeholder's Equity\",\n  render: company => formatLargeMonetaryNumber(company.totalStockholdersEquity)\n}, {\n  label: \"Retained Earnings\",\n  render: company => formatLargeMonetaryNumber(company.retainedEarnings)\n}];\nconst BalanceSheet = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [companyData, setCompanyData] = useState();\n  useEffect(() => {\n    const getCompanyData = async () => {\n      const value = await getBalanceSheet(ticker);\n      setCompanyData(value === null || value === void 0 ? void 0 : value.data[0]);\n    };\n    getCompanyData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: companyData ? /*#__PURE__*/_jsxDEV(RatioList, {\n      config: config,\n      data: companyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(BalanceSheet, \"oIWvfb9RHbVWP9I9E1ZAfgq5EdY=\", false, function () {\n  return [useOutletContext];\n});\n_c = BalanceSheet;\nexport default BalanceSheet;\nvar _c;\n$RefreshReg$(_c, \"BalanceSheet\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getBalanceSheet","RatioList","Spinner","formatLargeMonetaryNumber","jsxDEV","_jsxDEV","Fragment","_Fragment","config","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","render","company","totalAssets","totalCurrentAssets","cashAndCashEquivalents","propertyPlantEquipmentNet","intangibleAssets","longTermDebt","otherCurrentLiabilities","totalLiabilities","totalCurrentLiabilities","otherLiabilities","totalStockholdersEquity","retainedEarnings","BalanceSheet","props","_s","ticker","companyData","setCompanyData","getCompanyData","value","data","_c","$RefreshReg$"],"sources":["C:/Users/xifi3/Desktop/FinanceProject/frontend/src/Components/BalanceSheet/BalanceSheet.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { CompanyBalanceSheet, CompanyCashFlow } from \"../../company\";\r\nimport { useOutletContext } from \"react-router\";\r\nimport { getBalanceSheet } from \"../../api\";\r\nimport RatioList from \"../RatioList/RatioList\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport { formatLargeMonetaryNumber } from \"../../Helpers/NumberFormatting\";\r\n\r\ntype Props = {};\r\n\r\nconst config = [\r\n  {\r\n    label: <div className=\"font-bold\">Total Assets</div>,\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalAssets),\r\n  },\r\n  {\r\n    label: \"Current Assets\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalCurrentAssets),\r\n  },\r\n  {\r\n    label: \"Total Cash\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.cashAndCashEquivalents),\r\n  },\r\n  {\r\n    label: \"Property & equipment\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.propertyPlantEquipmentNet),\r\n  },\r\n  {\r\n    label: \"Intangible Assets\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.intangibleAssets),\r\n  },\r\n  {\r\n    label: \"Long Term Debt\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.longTermDebt),\r\n  },\r\n  {\r\n    label: \"Total Debt\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.otherCurrentLiabilities),\r\n  },\r\n  {\r\n    label: <div className=\"font-bold\">Total Liabilites</div>,\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalLiabilities),\r\n  },\r\n  {\r\n    label: \"Current Liabilities\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalCurrentLiabilities),\r\n  },\r\n  {\r\n    label: \"Long-Term Debt\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.longTermDebt),\r\n  },\r\n  {\r\n    label: \"Long-Term Income Taxes\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.otherLiabilities),\r\n  },\r\n  {\r\n    label: \"Stakeholder's Equity\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.totalStockholdersEquity),\r\n  },\r\n  {\r\n    label: \"Retained Earnings\",\r\n    render: (company: CompanyBalanceSheet) =>\r\n      formatLargeMonetaryNumber(company.retainedEarnings),\r\n  },\r\n];\r\n\r\nconst BalanceSheet = (props: Props) => {\r\n  const ticker = useOutletContext<string>();\r\n  const [companyData, setCompanyData] = useState<CompanyBalanceSheet>();\r\n  useEffect(() => {\r\n    const getCompanyData = async () => {\r\n      const value = await getBalanceSheet(ticker!);\r\n      setCompanyData(value?.data[0]);\r\n    };\r\n    getCompanyData();\r\n  }, []);\r\n  return (\r\n    <>\r\n      {companyData ? (\r\n        <RatioList config={config} data={companyData} />\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BalanceSheet;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}