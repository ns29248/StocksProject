{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xifi3\\\\Desktop\\\\FinanceProject\\\\frontend\\\\src\\\\Components\\\\IncomeStatement\\\\IncomeStatement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport Table from \"../Table/Table\";\nimport { getIncomeStatement } from \"../../api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst configs = [{\n  label: \"Date\",\n  render: company => company.date\n}, {\n  label: \"Total Revenue\",\n  render: company => company.revenue\n}, {\n  label: \"Cost Of Revenue\",\n  render: company => company.costOfRevenue\n}, {\n  label: \"Operating Expenses\",\n  render: company => company.operatingExpenses\n}, {\n  label: \"Gross Profit\",\n  render: company => company.grossProfit\n}, {\n  label: \"Income Before Tax\",\n  render: company => company.incomeBeforeTax\n}, {\n  label: \"Operating Income\",\n  render: company => company.operatingIncome\n}];\nconst IncomeStatement = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [incomeStatement, setIncomeStatement] = useState();\n  useEffect(() => {\n    const getRatios = async () => {\n      const result = await getIncomeStatement(ticker);\n      setIncomeStatement(result.data);\n    };\n    getRatios();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: incomeStatement ? /*#__PURE__*/_jsxDEV(Table, {\n      config: configs,\n      data: incomeStatement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Could not find income statement.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(IncomeStatement, \"EWkRNnPJ/dbjI8Gcx0h5nwXmoyA=\", false, function () {\n  return [useOutletContext];\n});\n_c = IncomeStatement;\nexport default IncomeStatement;\nvar _c;\n$RefreshReg$(_c, \"IncomeStatement\");","map":{"version":3,"names":["React","useState","useEffect","useOutletContext","Table","getIncomeStatement","jsxDEV","_jsxDEV","Fragment","_Fragment","configs","label","render","company","date","revenue","costOfRevenue","operatingExpenses","grossProfit","incomeBeforeTax","operatingIncome","IncomeStatement","props","_s","ticker","incomeStatement","setIncomeStatement","getRatios","result","data","children","config","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/xifi3/Desktop/FinanceProject/frontend/src/Components/IncomeStatement/IncomeStatement.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useOutletContext } from \"react-router-dom\";\r\nimport Table from \"../Table/Table\";\r\nimport { CompanyIncomeStatement } from \"../../company\";\r\nimport { getIncomeStatement } from \"../../api\";\r\n\r\ntype Props = {};\r\n\r\nconst configs = [\r\n  {\r\n    label: \"Date\",\r\n    render: (company: CompanyIncomeStatement) => company.date,\r\n  },\r\n  {\r\n    label: \"Total Revenue\",\r\n    render: (company: CompanyIncomeStatement) => company.revenue,\r\n  },\r\n  {\r\n    label: \"Cost Of Revenue\",\r\n    render: (company: CompanyIncomeStatement) => company.costOfRevenue,\r\n  },\r\n  {\r\n    label: \"Operating Expenses\",\r\n    render: (company: CompanyIncomeStatement) => company.operatingExpenses,\r\n  },\r\n  {\r\n    label: \"Gross Profit\",\r\n    render: (company: CompanyIncomeStatement) => company.grossProfit,\r\n  },\r\n  {\r\n    label: \"Income Before Tax\",\r\n    render: (company: CompanyIncomeStatement) => company.incomeBeforeTax,\r\n  },\r\n  {\r\n    label: \"Operating Income\",\r\n    render: (company: CompanyIncomeStatement) => company.operatingIncome,\r\n  },\r\n];\r\n\r\nconst IncomeStatement = (props: Props) => {\r\n  const ticker = useOutletContext<string>();\r\n  const [incomeStatement, setIncomeStatement] =\r\n    useState<CompanyIncomeStatement[]>();\r\n  useEffect(() => {\r\n    const getRatios = async () => {\r\n      const result = await getIncomeStatement(ticker!);\r\n      setIncomeStatement(result!.data);\r\n    };\r\n    getRatios();\r\n  }, []);\r\n  return (\r\n    <>\r\n      {incomeStatement ? (\r\n        <Table config={configs} data={incomeStatement} />\r\n      ) : (\r\n        <h1>Could not find income statement.</h1>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IncomeStatement;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,gBAAgB;AAElC,SAASC,kBAAkB,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAI/C,MAAMC,OAAO,GAAG,CACd;EACEC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACC;AACvD,CAAC,EACD;EACEH,KAAK,EAAE,eAAe;EACtBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACE;AACvD,CAAC,EACD;EACEJ,KAAK,EAAE,iBAAiB;EACxBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACG;AACvD,CAAC,EACD;EACEL,KAAK,EAAE,oBAAoB;EAC3BC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACI;AACvD,CAAC,EACD;EACEN,KAAK,EAAE,cAAc;EACrBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACK;AACvD,CAAC,EACD;EACEP,KAAK,EAAE,mBAAmB;EAC1BC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACM;AACvD,CAAC,EACD;EACER,KAAK,EAAE,kBAAkB;EACzBC,MAAM,EAAGC,OAA+B,IAAKA,OAAO,CAACO;AACvD,CAAC,CACF;AAED,MAAMC,eAAe,GAAIC,KAAY,IAAK;EAAAC,EAAA;EACxC,MAAMC,MAAM,GAAGrB,gBAAgB,CAAS,CAAC;EACzC,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GACzCzB,QAAQ,CAA2B,CAAC;EACtCC,SAAS,CAAC,MAAM;IACd,MAAMyB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,MAAM,GAAG,MAAMvB,kBAAkB,CAACmB,MAAO,CAAC;MAChDE,kBAAkB,CAACE,MAAM,CAAEC,IAAI,CAAC;IAClC,CAAC;IACDF,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACN,oBACEpB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,EACGL,eAAe,gBACdlB,OAAA,CAACH,KAAK;MAAC2B,MAAM,EAAErB,OAAQ;MAACmB,IAAI,EAAEJ;IAAgB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEjD5B,OAAA;MAAAuB,QAAA,EAAI;IAAgC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EACzC,gBACD,CAAC;AAEP,CAAC;AAACZ,EAAA,CApBIF,eAAe;EAAA,QACJlB,gBAAgB;AAAA;AAAAiC,EAAA,GAD3Bf,eAAe;AAsBrB,eAAeA,eAAe;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}