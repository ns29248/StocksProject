{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xifi3\\\\Desktop\\\\FinanceProject\\\\frontend\\\\src\\\\Components\\\\IncomeStatement\\\\IncomeStatement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport { getIncomeStatement } from \"../../api\";\nimport Table from \"../Table/Table\";\nimport Spinner from \"../Spinner/Spinner\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst configs = [{\n  label: \"Date\",\n  render: company => company.date\n}, {\n  label: \"Revenue\",\n  render: company => company.revenue\n}, {\n  label: \"Cost Of Revenue\",\n  render: company => company.costOfRevenue\n}, {\n  label: \"Depreciation\",\n  render: company => company.depreciationAndAmortization\n}, {\n  label: \"Operating Income\",\n  render: company => company.operatingIncome\n}, {\n  label: \"Income Before Taxes\",\n  render: company => company.incomeBeforeTax\n}, {\n  label: \"Net Income\",\n  render: company => company.netIncome\n}, {\n  label: \"Net Income Ratio\",\n  render: company => company.netIncomeRatio\n}, {\n  label: \"Earnings Per Share\",\n  render: company => company.eps\n}, {\n  label: \"Earnings Per Diluted\",\n  render: company => company.epsdiluted\n}, {\n  label: \"Gross Profit Ratio\",\n  render: company => company.grossProfitRatio\n}, {\n  label: \"Opearting Income Ratio\",\n  render: company => company.operatingIncomeRatio\n}, {\n  label: \"Income Before Taxes Ratio\",\n  render: company => company.incomeBeforeTaxRatio\n}];\nconst IncomeStatement = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [incomeStatement, setIncomeStatement] = useState();\n  useEffect(() => {\n    const incomeStatementFetch = async () => {\n      const result = await getIncomeStatement(ticker);\n      setIncomeStatement(result.data);\n    };\n    incomeStatementFetch();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: incomeStatement ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        config: configs,\n        data: incomeStatement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(IncomeStatement, \"EWkRNnPJ/dbjI8Gcx0h5nwXmoyA=\", false, function () {\n  return [useOutletContext];\n});\n_c = IncomeStatement;\nexport default IncomeStatement;\nvar _c;\n$RefreshReg$(_c, \"IncomeStatement\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getIncomeStatement","Table","Spinner","jsxDEV","_jsxDEV","Fragment","_Fragment","configs","label","render","company","date","revenue","costOfRevenue","depreciationAndAmortization","operatingIncome","incomeBeforeTax","netIncome","netIncomeRatio","eps","epsdiluted","grossProfitRatio","operatingIncomeRatio","incomeBeforeTaxRatio","IncomeStatement","props","_s","ticker","incomeStatement","setIncomeStatement","incomeStatementFetch","result","data","children","config","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/xifi3/Desktop/FinanceProject/frontend/src/Components/IncomeStatement/IncomeStatement.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { CompanyIncomeStatement } from \"../../company\";\r\nimport { useOutletContext } from \"react-router-dom\";\r\nimport { getIncomeStatement } from \"../../api\";\r\nimport Table from \"../Table/Table\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\n\r\ntype Props = {};\r\n\r\nconst configs = [\r\n  {\r\n    label: \"Date\",\r\n    render: (company: CompanyIncomeStatement) => company.date,\r\n  },\r\n  {\r\n    label: \"Revenue\",\r\n    render: (company: CompanyIncomeStatement) => company.revenue,\r\n  },\r\n  {\r\n    label: \"Cost Of Revenue\",\r\n    render: (company: CompanyIncomeStatement) => company.costOfRevenue,\r\n  },\r\n  {\r\n    label: \"Depreciation\",\r\n    render: (company: CompanyIncomeStatement) =>\r\n      company.depreciationAndAmortization,\r\n  },\r\n  {\r\n    label: \"Operating Income\",\r\n    render: (company: CompanyIncomeStatement) => company.operatingIncome,\r\n  },\r\n  {\r\n    label: \"Income Before Taxes\",\r\n    render: (company: CompanyIncomeStatement) => company.incomeBeforeTax,\r\n  },\r\n  {\r\n    label: \"Net Income\",\r\n    render: (company: CompanyIncomeStatement) => company.netIncome,\r\n  },\r\n  {\r\n    label: \"Net Income Ratio\",\r\n    render: (company: CompanyIncomeStatement) => company.netIncomeRatio,\r\n  },\r\n  {\r\n    label: \"Earnings Per Share\",\r\n    render: (company: CompanyIncomeStatement) => company.eps,\r\n  },\r\n  {\r\n    label: \"Earnings Per Diluted\",\r\n    render: (company: CompanyIncomeStatement) => company.epsdiluted,\r\n  },\r\n  {\r\n    label: \"Gross Profit Ratio\",\r\n    render: (company: CompanyIncomeStatement) => company.grossProfitRatio,\r\n  },\r\n  {\r\n    label: \"Opearting Income Ratio\",\r\n    render: (company: CompanyIncomeStatement) => company.operatingIncomeRatio,\r\n  },\r\n  {\r\n    label: \"Income Before Taxes Ratio\",\r\n    render: (company: CompanyIncomeStatement) => company.incomeBeforeTaxRatio,\r\n  },\r\n];\r\n\r\nconst IncomeStatement = (props: Props) => {\r\n  const ticker = useOutletContext<string>();\r\n  const [incomeStatement, setIncomeStatement] =\r\n    useState<CompanyIncomeStatement[]>();\r\n\r\n  useEffect(() => {\r\n    const incomeStatementFetch = async () => {\r\n      const result = await getIncomeStatement(ticker);\r\n      setIncomeStatement(result!.data);\r\n    };\r\n    incomeStatementFetch();\r\n  }, []);\r\n  return (\r\n    <>\r\n      {incomeStatement ? (\r\n        <>\r\n          <Table config={configs} data={incomeStatement} />\r\n        </>\r\n      ) : (\r\n        <Spinner />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IncomeStatement;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}